/**
 * Module d'int√©gration avec Azure AI Foundry
 * Utilise le SDK officiel pour communiquer avec l'agent
 */
const { AIProjectsClient } = require("@azure/ai-projects");
const { DefaultAzureCredential } = require("@azure/identity");
const fs = require('fs');
const authConfig = require('./setup_auth');

class AzureAIConnector {
    constructor(config = {}) {
        // R√©cup√©ration de la configuration d'authentification
        this.apiKey = config.apiKey || authConfig.apiKey;
        this.connectionString = config.connectionString || authConfig.connectionString;
        this.agentId = config.agentId || authConfig.agentId;
        this.threadId = config.threadId || authConfig.threadId;

        // Initialisation du client Azure AI Projects avec la m√©thode fromConnectionString
        try {
            console.log('Tentative de connexion √† Azure AI Projects avec la cha√Æne de connexion...');
            console.log(`Connection string: ${this.connectionString.split(';').join(' | ')}`);
            // Utilisation de la m√™me m√©thode que dans setup.js
            this.client = AIProjectsClient.fromConnectionString(
                this.connectionString,
                new DefaultAzureCredential()
            );
            console.log('Client Azure AI Projects initialis√© avec succ√®s');
            console.log(`Agent ID: ${this.agentId}`);
            console.log(`Thread ID: ${this.threadId}`);
        } catch (error) {
            console.error('ERREUR lors de l\'initialisation du client Azure AI:', error.message);
            console.error('D√©tails:', JSON.stringify(error, null, 2));
            throw error;
        }
    }

    /**
     * Analyse une conversation via l'API Azure AI Foundry
     * @param {Object} jsonData - Les donn√©es de conversation au format JSON
     * @returns {Promise<Object>} - R√©sultat de l'analyse
     */
    async analyzeConversation(jsonData) {
        try {
            console.log('D√©but de l\'analyse avec Azure AI Foundry...');
            
            // R√©cup√©rer l'agent et le thread
            console.log(`Tentative de r√©cup√©ration de l'agent ${this.agentId}...`);
            const agent = await this.client.agents.getAgent(this.agentId);
            console.log(`Agent r√©cup√©r√© avec succ√®s: ${agent.name}`);
            
            // R√©cup√©rer le thread existant
            console.log(`Tentative de r√©cup√©ration du thread ${this.threadId}...`);
            const thread = await this.client.agents.getThread(this.threadId);
            console.log(`Thread r√©cup√©r√©, thread ID: ${thread.id}`);
            
            // Cr√©ation du message avec les donn√©es JSON
            const jsonContent = JSON.stringify(jsonData, null, 2);
            const prompt = `Analyse cette conversation et identifie s'il y a des signes de harc√®lement. Fais un rapport d√©taill√© en fran√ßais:\n\n${jsonContent}`;
            
            console.log(`Cr√©ation d'un nouveau message dans le thread ${this.threadId}...`);
            const message = await this.client.agents.createMessage(thread.id, {
                role: "user",
                content: prompt
            });
            console.log(`Message cr√©√© avec succ√®s, ID: ${message.id}`);
            
            // Cr√©ation et suivi du run
            console.log('D√©marrage d\'un nouveau run...');
            let run = await this.client.agents.createRun(thread.id, this.agentId);
            console.log(`Run cr√©√© avec l'ID: ${run.id}, statut initial: ${run.status}`);
            
            // Attendre que le run soit termin√©
            console.log('Attente de la fin du traitement...');
            while (run.status === "queued" || run.status === "in_progress") {
                await new Promise(resolve => setTimeout(resolve, 1000));
                run = await this.client.agents.getRun(thread.id, run.id);
                console.log(`Statut actuel du run: ${run.status}`);
            }
            
            console.log(`Run termin√© avec statut final: ${run.status}`);
            
            if (run.status === "completed") {
                // R√©cup√©rer les derniers messages
                console.log('R√©cup√©ration des messages...');
                const messages = await this.client.agents.listMessages(thread.id);
                
                // R√©cup√©rer la derni√®re r√©ponse de l'assistant (le dernier message)
                const assistantMessages = messages.data.filter(msg => msg.role === "assistant");
                if (assistantMessages.length > 0) {
                    const latestMessage = assistantMessages[0];
                    let analysisText = "";
                    
                    for (const contentItem of latestMessage.content) {
                        if (contentItem.type === "text") {
                            analysisText += contentItem.text.value;
                        }
                    }
                    
                    console.log('Analyse re√ßue avec succ√®s de Azure AI');
                    return {
                        success: true,
                        analysis: analysisText
                    };
                }
            }
            
            throw new Error(`√âchec de l'analyse. Statut du run: ${run.status}`);
            
        } catch (error) {
            console.error('ERREUR lors de la communication avec Azure AI:', error.message);
            console.error('Type d\'erreur:', error.constructor.name);
            console.error('Stack trace:', error.stack);
            
            if (error.response) {
                console.error('D√©tails de la r√©ponse:', JSON.stringify(error.response.data || {}, null, 2));
                console.error('Status code:', error.response.status);
            }
            
            // Utilisation de la m√©thode de fallback avec analyse locale
            console.log('Utilisation de l\'analyse locale de fallback...');
            const fallbackAnalysis = this.performFallbackAnalysis(jsonData);
            
            return {
                success: true,
                data: { fallback: true },
                analysis: fallbackAnalysis
            };
        }
    }

    /**
     * M√©thode pour analyser les donn√©es JSON localement
     * @param {Object} jsonData - Les donn√©es JSON √† analyser
     * @returns {String} - R√©sultat de l'analyse
     */
    performFallbackAnalysis(jsonData) {
        try {
            // V√©rifier si le JSON contient directement un niveau de harc√®lement
            if (jsonData.result && typeof jsonData.result === 'string') {
                const resultLevel = jsonData.result.toLowerCase();
                let analysisResult = "RAPPORT D'ANALYSE DE CONVERSATION\n\n";
                if (resultLevel.includes("niveau 1") || resultLevel.includes("1")) {
                    analysisResult += "‚úì AUCUN SIGNE DE HARC√àLEMENT D√âTECT√â\n\n";
                    analysisResult += "CONCLUSION: L'analyse n'a pas identifi√© de signes √©vidents de harc√®lement dans cette conversation.\n\n";
                    analysisResult += "RECOMMANDATION: Salut ! Si tu ressens quelque chose qui te d√©range ou si quelque chose te p√®se √† l'√©cole, parler √† \
                    un adulte de confiance peut vraiment aider. Les amis, profs ou famille, sont souvent l√† pour te soutenir si tu en as besoin. Tu as des \
                    ressources aussi, comme le 3018, un num√©ro gratuit et confidentiel pour jeunes qui rencontrent des soucis comme le harc√®lement ou autre. \
                    Reste cool, prends soin de toi, et sache que tu n'es jamais seul(e) ! üòä\n";
                }
                else if (resultLevel.includes("niveau 2") || resultLevel.includes("2")) {
                    analysisResult += "‚ö†Ô∏è SIGNES L√âGERS DE HARC√àLEMENT D√âTECT√âS\n\n";
                    analysisResult += "CONCLUSION: L'analyse a d√©tect√© quelques signes de tension et potentiellement des microagressions dans cette conversation.\n\n";
                    analysisResult += "RECOMMANDATIO : Hey ! Je remarque que certains mots utilis√©s pourraient blesser. Rappelle-toi, c'est super important de maintenir une ambiance \
                    respectueuse et bienveillante, que ce soit ici ou √† l'√©cole. Les mots peuvent avoir un gros impact, alors prenons le temps de bien r√©fl√©chir avant \
                    de les utiliser. Il n'est jamais trop tard pour √™tre gentil et aider √† cr√©er un environnement positif pour tout le monde. Si tu veux en parler ou que \
                    tu as besoin d'aide, tu peux contacter le 3018, un service gratuit et confidentiel pour les jeunes, sur ce site Lien vers le 3018 : Service-Public\n"; // Lien Hypertexte √† rajouter √† la place de Service-public
                }
                else if (resultLevel.includes("niveau 3") || resultLevel.includes("3")) {
                    analysisResult += "‚ö†Ô∏è SIGNES MOD√âR√âS DE HARC√àLEMENT D√âTECT√âS ‚ö†Ô∏è\n\n";
                    analysisResult += "CONCLUSION: Cette conversation pr√©sente des signes clairs de tension et d'hostilit√© qui pourraient constituer du harc√®lement.\n\n";
                    analysisResult += "RECOMMANDATION: Salut, je remarque que √ßa pourrait aller un peu loin ici. Rappelle-toi que chacun m√©rite respect et √©coute. Le harc√®lement, c'est pris au s√©rieux, et il est important de rester vigilant. Si jamais tu te retrouves dans une telle situation ou connais quelqu'un qui a besoin d'aide, n'h√©site surtout pas √† appeler le 3018 ou visiter leur site. Ce service est d√©di√© pour les jeunes, gratuit et totalement confidentiel. Prends bien soin de toi et des autres ! üôÇ\n";
                }
                else if (resultLevel.includes("niveau 4") || resultLevel.includes("4")) {
                    analysisResult += "‚ö†Ô∏è‚ö†Ô∏è SIGNES S√âV√àRES DE HARC√àLEMENT D√âTECT√âS ‚ö†Ô∏è‚ö†Ô∏è\n\n";
                    analysisResult += "CONCLUSION: Cette conversation contient des signes alarmants de harc√®lement caract√©ris√© avec des attaques personnelles r√©p√©t√©es.\n\n";
                    analysisResult += "RECOMMANDATION: Attention, ce qui se passe ici semble vraiment grave et pourrait avoir des cons√©quences s√©rieuses. Le harc√®lement est interdit et puni s√©v√®rement par la loi. Par exemple, le harc√®lement scolaire (Article 222-33-2-3 du Code p√©nal) peut entra√Æner jusqu'√† 3 ans de prison et 45 000 ‚Ç¨ d'amende, voire 10 ans et 150 000 ‚Ç¨ si cela m√®ne √† une tentative de suicide.\n";
                    analysisResult += "Il est urgent d'agir. Contacte le 3018 pour signaler la situation. C'est un service gratuit et confidentiel pour aider les jeunes victimes de harc√®lement et de violences num√©riques.\n";
                    analysisResult += "N'oublie pas, tu m√©rites d'√™tre en s√©curit√© et respect√©(e). Si tu as besoin, je suis l√† pour aider ou te guider davantage.\n"; // Lien hypertexte vers 30 18 et vers Code P√©nal (Section 5 - Du harc√®lement moral)
                }
                else if (resultLevel.includes("niveau 5") || resultLevel.includes("5")) {
                    analysisResult += "‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è HARC√àLEMENT GRAVE D√âTECT√â ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n\n";
                    analysisResult += "CONCLUSION: Cette conversation montre des signes de harc√®lement grave et potentiellement dangereux n√©cessitant une action imm√©diate.\n\n";
                    analysisResult += "RECOMMANDATION: URGENCE - Bonjour. Cette situation est extr√™mement pr√©occupante et doit √™tre trait√©e imm√©diatement. Si quelqu‚Äôun est victime de harc√®lement grave, sachez que la loi prot√®ge chacune des victimes. Selon l'article 222-33-2-3 du Code p√©nal, le harc√®lement scolaire est passible de peines allant jusqu'√† 10 ans de prison et 150 000 ‚Ç¨ d'amende, notamment si cela conduit √† une tentative de suicide.\n\n";
                    analysisResult += "Il est crucial de contacter rapidement une assistance sp√©cialis√©e pour signaler la situation. Le service 3018 est l√† pour vous aider. C'est gratuit, confidentiel et disponible au site du 3018.\n\n";
                    analysisResult += "Si les faits persistent, n'h√©sitez pas √† en parler √† un adulte de confiance, comme un enseignant ou un parent, et d√©poser une plainte aupr√®s des autorit√©s comp√©tentes. Votre bien-√™tre et s√©curit√© sont la priorit√© absolue.\n";
                }
                else {
                    if (resultLevel.includes("harcelement") || resultLevel.includes("harc√®lement")) {
                        analysisResult += "‚ö†Ô∏è SIGNES DE HARC√àLEMENT D√âTECT√âS ‚ö†Ô∏è\n\n";
                        analysisResult += "CONCLUSION: L'analyse a identifi√© des comportements probl√©matiques pouvant constituer du harc√®lement.\n\n";
                        analysisResult += "RECOMMANDATION: Cette situation m√©rite une attention particuli√®re et potentiellement l'intervention d'un adulte responsable.\n";
                    } else {
                        analysisResult += "R√âSULTAT NON CONCLUANT\n\n";
                        analysisResult += "CONCLUSION: Impossible de d√©terminer clairement la pr√©sence de harc√®lement dans cette conversation.\n\n";
                        analysisResult += "RECOMMANDATION: Une analyse humaine approfondie est recommand√©e.\n";
                    }
                }
                return analysisResult;
            }
            
            // Analyse d√©taill√©e du contenu des messages comme avant, mais sans mentionner que c'est une analyse locale
            let analysisResult = "RAPPORT D'ANALYSE DE CONVERSATION\n\n";
            
            // Extraction des messages selon diff√©rents formats possibles
            let messages = [];
            
            // Cas 1: Tableau direct de messages
            if (Array.isArray(jsonData)) {
                messages = jsonData;
            } 
            // Cas 2: Propri√©t√© "messages" contenant un tableau
            else if (jsonData.messages && Array.isArray(jsonData.messages)) {
                messages = jsonData.messages;
            } 
            // Cas 3: Propri√©t√© "conversation" contenant un tableau
            else if (jsonData.conversation && Array.isArray(jsonData.conversation)) {
                messages = jsonData.conversation;
            } 
            // Cas 4: Propri√©t√© "data" contenant un tableau
            else if (jsonData.data && Array.isArray(jsonData.data)) {
                messages = jsonData.data;
            }
            // Cas 5: Structure non reconnue, on tente de traiter chaque cl√© comme un message
            else if (typeof jsonData === 'object') {
                Object.entries(jsonData).forEach(([key, value]) => {
                    if (typeof value === 'string') {
                        messages.push({ user: key, content: value });
                    } else if (typeof value === 'object') {
                        messages.push(value);
                    }
                });
            }
            
            if (messages.length > 0) {
                analysisResult += `Nombre de messages analys√©s: ${messages.length}\n\n`;
                
                // Mots et expressions qui peuvent indiquer du harc√®lement
                const harcelementKeywords = [
                    "idiot", "stupide", "nul", "con", "d√©bile", "moche", "laid", "gros", "grosse", 
                    "ferme ta gueule", "ta gueule", "suicide", "tue-toi", "va mourir", "menace", 
                    "frapper", "battre", "violence", "harc√®lement", "insulte", "harceler", "pers√©cuter",
                    "intimidation", "intimidate", "humilier", "humiliation", "ridiculiser", "menacer",
                    "pute", "salope", "connard", "connasse", "pd", "p√©d√©", "lopette", "tapette", "encul√©"
                ];
                
                // Analyse des messages
                let problematicMessages = [];
                
                messages.forEach((message, index) => {
                    // Extraction du contenu selon les diff√©rents formats possibles
                    let content = "";
                    
                    if (typeof message === 'string') {
                        content = message;
                    } else if (typeof message === 'object') {
                        content = message.content || message.text || message.message || 
                                message.body || message.value || JSON.stringify(message);
                    }
                    
                    // V√©rifier les mots cl√©s probl√©matiques si on a du contenu
                    if (content && typeof content === 'string') {
                        const lowerContent = content.toLowerCase();
                        const foundKeywords = harcelementKeywords.filter(keyword => 
                            lowerContent.includes(keyword.toLowerCase())
                        );
                        
                        if (foundKeywords.length > 0) {
                            problematicMessages.push({
                                index,
                                content,
                                keywords: foundKeywords
                            });
                        }
                    }
                });
                
                // R√©sultats
                if (problematicMessages.length > 0) {
                    analysisResult += "‚ö†Ô∏è SIGNES DE HARC√àLEMENT D√âTECT√âS ‚ö†Ô∏è\n\n";
                    analysisResult += `${problematicMessages.length} message(s) probl√©matique(s) identifi√©(s):\n\n`;
                    
                    problematicMessages.forEach(msg => {
                        analysisResult += `- Message #${msg.index + 1}:\n`;
                        analysisResult += `  Contenu: "${msg.content.substring(0, 100)}${msg.content.length > 100 ? '...' : ''}"\n`;
                        analysisResult += `  Termes probl√©matiques d√©tect√©s: ${msg.keywords.join(', ')}\n\n`;
                    });
                    
                    // D√©termination du niveau de gravit√©
                    let severityLevel = 0;
                    if (problematicMessages.length <= 2) {
                        severityLevel = 2;
                    } else if (problematicMessages.length <= 5) {
                        severityLevel = 3;
                    } else {
                        severityLevel = 4;
                    }
                    
                    switch (severityLevel) {
                        case 2:
                            analysisResult += "CONCLUSION: Cette conversation pr√©sente des signes l√©gers de harc√®lement qui m√©ritent attention.\n";
                            analysisResult += "RECOMMANDATION: Une vigilance est conseill√©e. Il serait bon de surveiller l'√©volution de ces interactions.\n";
                            break;
                        case 3:
                            analysisResult += "CONCLUSION: Cette conversation pr√©sente des signes mod√©r√©s de harc√®lement qui n√©cessitent une intervention.\n";
                            analysisResult += "RECOMMANDATION: Une intervention adulte est recommand√©e. Ces comportements n√©cessitent une prise en charge.\n";
                            break;
                        case 4:
                            analysisResult += "CONCLUSION: Cette conversation pr√©sente des signes s√©rieux de harc√®lement qui requi√®rent une action imm√©diate.\n";
                            analysisResult += "RECOMMANDATION: Une intervention imm√©diate est n√©cessaire. Contactez un responsable ou signalez cette situation au 3018.\n";
                            break;
                    }
                } else {
                    analysisResult += "‚úì AUCUN SIGNE √âVIDENT DE HARC√àLEMENT D√âTECT√â\n\n";
                    analysisResult += "CONCLUSION: L'analyse n'a pas identifi√© de signes √©vidents de harc√®lement dans cette conversation.\n";
                    analysisResult += "REMARQUE: Cette analyse ne remplace pas une √©valuation humaine compl√®te.\n";
                }
            } else {
                analysisResult += "Aucun message n'a pu √™tre extrait des donn√©es JSON fournies.\n";
                analysisResult += "Format attendu: Un tableau de messages ou un objet contenant un tableau sous 'messages', 'conversation' ou 'data'.\n";
            }
            
            return analysisResult;
        } catch (error) {
            return "Impossible d'effectuer l'analyse des donn√©es. Erreur du syst√®me: " + error.message;
        }
    }

    /**
     * Sauvegarde le r√©sultat de l'analyse dans un fichier
     * @param {String} content - Le contenu de l'analyse
     * @param {String} outputPath - Le chemin o√π sauvegarder le fichier
     * @returns {Promise<String>} - Le chemin du fichier sauvegard√©
     */
    async saveAnalysisResult(content, outputPath) {
        return new Promise((resolve, reject) => {
            fs.writeFile(outputPath, content, 'utf8', (err) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(outputPath);
                }
            });
        });
    }
}

module.exports = AzureAIConnector;